// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// model User {
//   id              Int       @id @default(autoincrement())
//   full_name       String    @db.VarChar(100)
//   gender          String    @db.VarChar(10)
//   age             Int
//   address         String    @db.VarChar(255)
//   phone_number    String    @db.VarChar(20)
//   email           String?   @unique @db.VarChar(100)
//   password        String    @db.VarChar(255)
//   createdAt       DateTime  @default(now()) @map("created_at")
//   updatedAt       DateTime  @updatedAt @map("updated_at") 
//   specialization  String? @db.VarChar(100)
//   experience      Int?
//   feePerConsult   Int?
//   startDate       DateTime?
//   endDate         DateTime?
//   role Role       @default(PATIENT)
//   doctorAppointment  Appointment[] @relation("doctor")
//   patientAppointment     Appointment[] @relation("patient")
// }

// enum Role{
//   ADMIN
//   DOCTOR
//   PATIENT
// }

// model Appointment {
//   id           Int       @id @default(autoincrement())
//   dataTime     DateTime
//   status       AppointmentStatus @default(PENDING)
//   seen         Boolean @default(false)
//   doctor       User  @relation(fields: [doctorId], references: [id], name: "doctor")
//   doctorId     Int
//   patient      User  @relation(fields: [patientId], references: [id],name: "patient")
//   patientId    Int
// }

// enum AppointmentStatus{
//   PENDING
//   APPROVED
//   REJECTED
// }


model User{     
id               Int            @id @default(autoincrement())
profile_img      String?     
full_name        String         @db.VarChar(100)
gender           Gender     
age              Int      
address          String         @db.VarChar(255)
phone_number     String         @db.VarChar(20)
email            String         @unique @db.VarChar(100)
password         String         @db.VarChar(255)
createdAt        DateTime       @default(now()) @map("created_at")
updatedAt        DateTime       @updatedAt @map("updated_at")
role             Role           @default(PATIENT)
appointment      Appointment[]
doctor           Doctor?
}

enum Gender{
	MALE
  FEMALE
}

model Doctor{
id                  Int          @id @default(autoincrement())
specialization      String       @db.VarChar(50)
experience          Int
status              Status @default(PENDING)
fee_per_consult     Int
is_available        Boolean @default(false)
start_date          DateTime
end_date            DateTime
appointment         Appointment[]
user                User @relation(fields: [userId],references: [id])
userId              Int @unique
}

enum Role{
ADMIN
DOCTOR
PATIENT
}

model Appointment {
id           Int               @id @default(autoincrement())
data_time    DateTime
status       Status @default(PENDING)
seen         Boolean           @default(false)
doctor       Doctor            @relation(fields: [doctorId], references: [id])
doctorId     Int
patient      User              @relation(fields: [patientId], references: [id])
patientId    Int
createdAt           DateTime       @default(now()) @map("created_at")
updatedAt           DateTime       @updatedAt @map("updated_at")
}

enum Status{
PENDING
APPROVED
REJECTED
}


